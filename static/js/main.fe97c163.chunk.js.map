{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","apis/jsonPlaceholder.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","searchField","filter","robot","toLowerCase","includes","map","SearchBox","props","type","placeholder","onChange","searchChange","axios","create","baseURL","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","App","fetchUsers","a","jsonPlaceholder","get","response","data","onSearchChange","length","connect","dispatch","event","text","target","value","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initialState","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fe97c163.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots, searchField }) => {\r\n  const filteredRobots = robots.filter((robot) =>\r\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n  );\r\n\r\n  return filteredRobots.map((robot) => {\r\n    return (\r\n      <Card\r\n        key={robot.id}\r\n        id={robot.id}\r\n        name={robot.name}\r\n        email={robot.email}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={props.searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: `https://jsonplaceholder.typicode.com/`,\r\n});\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops...Something went wrong!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport { setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchField,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    robots: [],\r\n  };\r\n  componentDidMount() {\r\n    this.fetchUsers();\r\n  }\r\n\r\n  fetchUsers = async () => {\r\n    const response = await jsonPlaceholder.get('/users');\r\n\r\n    this.setState({\r\n      robots: response.data,\r\n    });\r\n  };\r\n  // handleSearch = (event) => {\r\n  //   this.setState({\r\n  //     searchValue: event.target.value,\r\n  //   });\r\n\r\n  render() {\r\n    const { robots } = this.state;\r\n    const { searchField, onSearchChange } = this.props;\r\n\r\n    return !robots.length ? (\r\n      <h1>Loading...</h1>\r\n    ) : (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList searchField={searchField} robots={robots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\nconst initialState = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport { searchRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(searchRobots, applyMiddleware(logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}